y = "Donghyu Kang"
cat(x,y)
?cat
5 %/% 2
5/2
3**2
-3**2
3^5
3**5
3**5 %/% 2
-3**5 %/% 2
-3^2.5
-3^5/2
-3^5 %/% 2
-3^(5/2)
-3^(5%/%2)
3^(5%/%2)
3**5 %/% 2
(-3)**5 %/% 2
(-3)**5 / 2
x='8'
class(x)
x+1
as.numeric(x)+1
x=x+1
x=as.numeric(x)
x+1
x=x+1
x
3%2
3//2
(-3)^(5/2)
(-3)**(5/2)
x_1 = rnorm(5)
x_1
x_2 = 1:10
ls
x_3=x_2[1:5]
x_3
mysum = x_1 + x_3
mysum
x_1 + x_3
x_1
x_1 + c(1,2)
matrix(1:12, 4,3)
matrix(1:12, nrow=4)
matrix(1:12, ncol=3)
v <- 1:12; dim(v) <- c(4, 3)
v
ma_mat
my_mat
mymat = matrix(1:12, 4,3)
mumat
mymat[:,:]
mymat[:]
mymat[1,:]
mymat[1,]
mymat[1,1:2]
mymat[1,1:2, drop=F]
m1 = (1:6,2,3)
m1 = (seq(1:6),2,3)
m1 = (seq(1:6),2,3))
m1 = matrix(1:6,2,3)
m2 = matrix(7:18,4,3)
c(m1,m2)
rbind(m1,m2)
cbind(m1,m2)
my2 = matrix(1:9, 3,3, byrow=T)
my2
rm(list=ls)
rm(list=ls())
getwd()
n = 1:15
rm(list=ls)
rm(list=ls())
n = 1:15
n = 1:15
P = 5000
r = 0.115
A = P * (1+r/100)^n
A
n = 1:15
P = 5000
r = 0.115
A = P * (1+r/100)^n
df <- data.frame(Amount = A,
N_year = n)
library(ggplot2)
x <- ggplot(data=df, aex(x=N_year, y=Amount)) +
geom_bar(stat='identity')
x <- ggplot(data=df, aes(x=N_year, y=Amount)) +
geom_bar(stat='identity')
min(A)
max(A)
mean(A)
std(A)
var(A)
sqrt(var(A))
sd(a)
sd(A)
tall
height = c(180, 165, 160, 193)  # unit : cm
weight = c(87, 58, 65, 100)     # unit : kg
height_m = height /100  # unit : m
BMI = weight / (height)^2
BMI
tall = height[height > 6]
tall
height
height > 170
height = c(180, 165, 160, 193)  # unit : cm
weight = c(87, 58, 65, 100)     # unit : kg
height_m = height /100  # unit : m
BMI = weight / (height)^2
BMI
tall = height > 6 * 30.48 # 1 feet = 30.48 cm
tall
data(cars)
View(cars)
cars = data(cars)
cars
cars[1:5,]
View(df)
View(df)
View(df)
rm(list=ls())
data(cars)
data(cars)
data(cars)
rm(list=ls())
data(cars)
cars
type(cars)
class(cars)
df_cars = data(cars)
df_cars
rm(list=ls())
data(cars)
type(cars)
class(cars)
# clsss(cars)
#2
cars[1:5,]
View(cars)
View(cars)
View(cars)
View(cars)
dim(cars)
length(cars)
length(cars[,])
dim(cars.keys)
View(cars)
View(cars)
dim(cars)[1]
#3-1
data(cars)
# clsss(cars)
#3-2
cars[1:5,]
#3-3
set.seed(0)
row_len = dim(cars)[1]
state = sample(c('NY','CA','CT'), size=row_len, replace=TRUE)
cars[,3]=1:50
View(cars)
View(cars)
colnames(cars)
rm(list=ls())
#3-1
data(cars)
# clsss(cars)
#3-2
cars[1:5,]
#3-3
set.seed(0)
row_len = dim(cars)[1]
state = sample(c('NY','CA','CT'), size=row_len, replace=TRUE)
state
#3-4
cars[,3] = state
colnames(cars) = c(colnames(cars), 'state')
View(cars)
View(cars)
colnames(cars)
colnames(cars) = c(colnames(cars)[,1:2], 'state')
colnames(cars)[1:2]
#3-1
data(cars)
# clsss(cars)
#3-2
cars[1:5,]
#3-3
set.seed(0)
row_len = dim(cars)[1]
state = sample(c('NY','CA','CT'), size=row_len, replace=TRUE)
state
#3-4
cars[,3] = state
colnames(cars) = c(colnames(cars)[1:2], 'state')
cars
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
#4-1
#4-2
#4-3
#4-4
View(ts_data)
dim(ts_data)
#4-1
print( "# of observation = ", str(dim(ts_data[1])) )
#4-1
print( "# of observation = "$s, % str(dim(ts_data[1])) )
#4-1
print( "# of observation = "$s, str(dim(ts_data[1])) )
#4-1
print( "# of observation = " + str(dim(ts_data[1])) )
#4-1
print( "# of observation = " ) + str(dim(ts_data[1]))
#4-1
print ( ( "# of observation = " ), str(dim(ts_data[1])) )
str(dim(ts_data[1]))
#4-1
print ( ( "# of observation = " ), as.chracter(dim(ts_data[1])) )
as.character(12)
#4-1
print ( ( "# of observation = " ), as.character(dim(ts_data[1])) )
as.character(dim(ts_data[1]))
#4-1
print ( ( "# of observation = " ), as.character(dim(ts_data)[1])) )
#4-1
print ( ( "# of observation = " ), as.character(dim(ts_data)[1]) )
dim(ts_data)[1]
as.character(dim(ts_data)[1])
#4-1
"# of observation = " + as.character(dim(ts_data)[1])
#4-1
print ("# of observation = " , as.character(dim(ts_data)[1]) )
#4-1
print ("# of observation = " , dim(ts_data)[1] )
#4-1
print ("# of observation = ") dim(ts_data)[1]
dim(ts_data)[1]
#4-1
print ("# of observation = ")
#4-1
N_obs = c( "# of observation = ", dim(ts_data)[1])
print(N_obs)
N_var = dim(ts_data)[2]  # Number of variables
N_var
print('adjkfsadfa',N_obs)
print('adjkfsadfa=%d',% N_obs)
print('adjkfsadfa=%d'% N_obs)
print("Current working dir: ", N_var)
print("Number of observatons : ", N_obs)
cat("Number of observatons : ", N_obs)
cat(N_obs)
cat(state)
View(ts_data)
View(ts_data)
class(ts_data)
summary(ts_data)
lapply(ts_data, class)
is.na(ts_data)
sum(c(TRUE, FALSE))
sum(c(TRUE, TRUE))
sum(is.na(ts_data))
cat ("rows have missing values : ", rownames(ts_data)[rowSums(is.na(ts_data)) > 0])
ts_data = read.csv('https://s3.amazonaws.com/graderdata/TimesSquareSignage.csv', stringsAsFactors=FALSE)
#4-1
N_obs = dim(ts_data)[1]  # Number of observations
N_var = dim(ts_data)[2]  # Number of variables
cat("Number of observations = ", N_obs)
cat("Number of variables = ", N_var)
#4-2
lapply(ts_data, class)
#4-3
cat ("Missing values in the dataset = " , sum(is.na(ts_data)) )
cat ("rows have missing values : ", rownames(ts_data)[rowSums(is.na(ts_data)) > 0])
cat ("rows have missing values : \n", rownames(ts_data)[rowSums(is.na(ts_data)) > 0])
cat ("The number of missing values in the dataset = " , sum(!is.na(ts_data)) )
cat ("Columns that have missing values : \n", colnames(ts_data)[colSums(is.na(ts_data)) > 0])
View(ts_data)
View(ts_data)
getwd()
dir.create(cur_path/data)
cur_path = getwd()
dir.create(cur_path/data)
cur_path = getwd()
new_dir = cat(cur_path, '/data')
cur_path = getwd()
new_dir = cat(cur_path,'/data')
cur_path = getwd()
new_dir = cat(cur_path,'/data', sep='')
new_dir = cat('dir.create(', cur_path,'/data', ')',sep='')
new_dir = cat(cur_path,'/data', ,sep='')
new_dir = cat(cur_path,'/data', sep='')
dir.create(new_dir)
?dir.create
mainDir = getwd()
subDir = "data"
dir.create(file.path(mainDir, subDir))
ts_data[ts_data$Location == 'Upper Bway', ]
ts_data[ts_data$Location == 'Upper Bway']
ts_data[,ts_data$Location == 'Upper Bway']
ts_data[ts_data$Location == 'Upper Bway', ]
write.table(ts_data[ts_data$Location == 'Upper Bway', ], file='./data/upperBway.csv', sep=',', row.names=F)
AVG(ts_data$SF)
mean(ts_data$SF)
?order()
ts_data[order(ts_data$TOTAL.SF, decreasin=T)[1:10], c(1,2,4)]
ts_data[order(ts_data$TOTAL.SF, decreasing=T)[1:10], c(1,2,4)]
addinslist:::addinslistAddin()
#install.packages("addinslist")
library(addinslist)
library(ggplot2)
addinslist:::addinslistAddin()
install.packages(c("digest", "pillar"))
library("addinslist", lib.loc="~/R/win-library/3.4")
detach("package:addinslist", unload=TRUE)
addinslistAddin()
install.packages("googleVis")
library(googleVis) # install.packages("googleVis")
scatter <- gvisScatterChart(mtcars[,c("wt", "mpg")])
plot(scatter)
dt <- mtcars[,c("wt", "mpg")]
dt$cyl_4 <- ifelse(mtcars$cyl==4, dt$mpg, NA)
dt$cyl_6 <- ifelse(mtcars$cyl==6, dt$mpg, NA)
dt$cyl_8 <- ifelse(mtcars$cyl==8, dt$mpg, NA)
dt$mpg <- NULL
head(dt)
scatter <- gvisScatterChart(dt)
plot(scatter)
mtcars[,c("wt", "mpg")]
my_options <- list(width="600px", height="300px",
title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}")
plot(gvisScatterChart(dt,options=my_options))
my_options$explorer="{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(dt,options=my_options))
dt <- mtcars[,c("wt", "mpg")]
dt$cyl_4 <- ifelse(mtcars$cyl==4, dt$mpg, NA)
dt$cyl_4.html.tooltip <- rownames(dt)
dt$cyl_6 <- ifelse(mtcars$cyl==6, dt$mpg, NA)
dt$cyl_6.html.tooltip <- rownames(dt)
dt$cyl_8 <- ifelse(mtcars$cyl==8, dt$mpg, NA)
dt$cyl_8.html.tooltip <- rownames(dt)
dt$mpg <- NULL
head(dt)
plot(gvisScatterChart(dt,options=my_options))
devtools::install_github("rstudio/leaflet")
library(leaflet)
library(leaflet)
leaflet() %>% addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-74.0059, lat=40.7128, popup="New York City")
leaflet() %>% addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-74.0059, lat=40.7128, popup="New York City")
leaflet() %>% addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-74.0059, lat=40.7128, popup="New York City")
library(leaflet)
leaflet() %>% addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-74.0059, lat=40.7128, popup="New York City")
tolower("BIG DATA ANSWERS OUR BIG QUESTIONS: WHO, WHAT, WHEN, WHERE, HOW, AND MAYBE WHYâ€¦")
tolower("DATA SCIENCE FOLLOWS THE SCIENTIFIC CYCLE")
shiny::runApp('E:/Data.Science/NYCDSA/40_Projects/Shiny/TopStreamedSongs')
install.packages("plotly")
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
p <- ggplot(data = d, aes(x = carat, y = price)) +
geom_point(aes(text = paste("Clarity:", clarity)), size = 4) +
geom_smooth(aes(colour = cut, fill = cut)) + facet_wrap(~ cut)
p <- ggplotly(p)
View(p)
setwd("E:/Data.Science/NYCDSA/40_Projects/Shiny/TopStreamedSongs")
shiny::runApp()
runApp()
?aes_string
runApp()
unique(raw.df$TRACK_NAME)
raw.df[ARTIST == "input$x"Maroon 5", TRACK_NAME]
unique(raw.df[ARTIST == input$x, TRACK_NAME])
names(raw.df)
unique(raw.df[ARTIST == input$x, "TRACK_NAME"])
unique(raw.df["ARTIST" == input$x, "TRACK_NAME"])
unique(raw.df["ARTIST" == "Maroon 5", "TRACK_NAME"])
View(flights)
unique(flights[origin == "LAX", dest])
type = c('Maroon 5','CCSO')
date = as.Date(c("2017-01-01", "2017-01-31"), format=("%Y-%m-%d"))
input = data.frame(type, date)
a<- raw.df %>%
filter(ARTIST == input$type[1],
DATE > (input$date[1]) & DATE < (input$date[2]), REGION %in% c("ec", "fr", "ai"))
raw.df[ARTIST == "Maroon 5, TRACK_NAME]
raw.df[ARTIST == "Maroon 5", TRACK_NAME]
class(flights)
class(raw.df)
raw.df %>% select(ARIST == "Maroon 5", TRACK_NAME)
a<-raw.df %>% select(ARTIST == "Maroon 5", TRACK_NAME)
a<-raw.df %>% select("ARTIST" == "Maroon 5", "TRACK_NAME")
a<-raw.df %>% filter("ARTIST" == "Maroon 5")
a<-raw.df %>% filter("ARTIST" == "Maroon 5") %>% select("TRACK_NAME")
a<-raw.df %>% filter("ARTIST" == "Maroon 5")
a<-raw.df %>% filter("ARTIST" == Maroon 5)
a<-raw.df %>% filter(ARTIST == 'Maroon 5')
a<-raw.df %>% filter(ARTIST == 'Maroon 5') %>% select(TRACK_NAME)
unique(a)
runApp()
nmRawdf[-1]
type = c('Maroon 5','CCSO')
date = as.Date(c("2017-01-01", "2017-01-31"), format=("%Y-%m-%d"))
input = data.frame(type, date)
#as.POSIXct(strptime("2017-01-31", "%Y-%m-%d"))
#b = as.Date("2016-01-10", format("%Y-%m-%d"))
a<- raw.df %>%
filter(ARTIST == input$type[1],
DATE > (input$date[1]) & DATE < (input$date[2]), REGION %in% c("ec", "fr", "ai"))
#arrange(REGION)
rlist = c("ec", "fr", "ai")
b<- raw.df %>%
filter(ARTIST == input$type[1],
DATE > (input$date[1]) & DATE < (input$date[2]), REGION %in% rlist)
# b <- raw.df %>% filter(ARTIST == input$type[1])
# c <- raw.df %>% filter(DATE > (input$date[1]) & DATE < (input$date[2]))
g <- ggplot(data = a, aes(x=DATE, y=RANKING))
g + geom_point() + stat_smooth(method = "lm", se = FALSE) + facet_wrap(.~REGION)
type = c('Maroon 5','CCSO')
date = as.Date(c("2017-01-01", "2017-01-31"), format=("%Y-%m-%d"))
input = data.frame(type, date)
#as.POSIXct(strptime("2017-01-31", "%Y-%m-%d"))
#b = as.Date("2016-01-10", format("%Y-%m-%d"))
a<- raw.df %>%
filter(ARTIST == input$type[1],
DATE > (input$date[1]) & DATE < (input$date[2]), REGION %in% c("ec", "fr", "ai"))
#arrange(REGION)
rlist = c("ec", "fr", "ai")
b<- raw.df %>%
filter(ARTIST == input$type[1],
DATE > (input$date[1]) & DATE < (input$date[2]), REGION %in% rlist)
# b <- raw.df %>% filter(ARTIST == input$type[1])
# c <- raw.df %>% filter(DATE > (input$date[1]) & DATE < (input$date[2]))
g <- ggplot(data = a, aes(x=DATE, y=RANKING))
g + geom_point() + stat_smooth(method = "lm", se = FALSE) + facet_wrap(~REGION)
runApp()
g + geom_point() + stat_smooth(method = "lm", se = FALSE) + facet_wrap(~REGION)
g + geom_point() + stat_smooth(method = "lm", se = FALSE) + facet_grid(~REGION)
runApp()
runApp()
runApp()
g + geom_point() + stat_smooth(method = "lm", se = FALSE) + facet_grid(REGION~REGION)
g + geom_point() + stat_smooth(method = "lm", se = FALSE) + facet_grid("~REGION")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
raw.df$TRACK_NAME[1]
runApp()
?selectInput
runApp()
start = "2007-01-01"
end = "2017-01-31"
c<- unique(raw.df %>% filter(DATE > start & DATE < end) %>% select(ARTIST)))
c<- unique(raw.df %>% filter(DATE > start & DATE < end) %>% select(ARTIST))
c[1]
c[1][1]
c$1
c$[1]
c[,1]
c[1,]
length(c)
len(c)
dim(c)
runApp()
runApp()
runApp()
raw.df$DATE > "2017-01-01"
runApp()
runApp()
rawInitArtist = unique(raw.df %>% filter(DATE > "2017-01-01" & DATE < "2017-01-31") %>% select(ARTIST))
runApp()
runApp()
rm(list=ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?box
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
